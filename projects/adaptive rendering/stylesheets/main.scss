/* VARS */
// Misc.
$misc: (
    z-index-base:		10000
);

// Duration.
$duration: (
    transition:			0.2s,
    load:				1s,
    banner:				1.25s
);

// Size.
$size: (
    border-radius:		4px,
    element-height:		2.75em,
    element-margin:		2em
);

// Font.
$font: (
    family:				('Source Sans Pro', Helvetica, sans-serif),
    family-fixed:		('Courier New', monospace),
    weight:				300,
    weight-bold:		400,
    weight-extrabold:	900
);

// Palette.
$palette: (
    bg:					#ffffff,
    bg-alt:				#e6e8eb,
    fg:					#8b8f94,
    fg-bold:			#74797f,
    fg-light:			#e6e8eb,
    border:				#e6e8eb,
    border-bg:			rgba(144,144,144,0.075),

    accent: (
        bg:				#f0701d,
        fg:				mix(#64a9e9, #ffffff, 25%),
        fg-bold:		#ffffff,
        fg-light:		mix(#64a9e9, #ffffff, 40%)
    )
);

/* FUNCTIONS */
/// Gets a duration value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _duration($keys...) {
@return val($duration, $keys...);
}

/// Gets a font value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _font($keys...) {
@return val($font, $keys...);
}

/// Gets a misc value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _misc($keys...) {
@return val($misc, $keys...);
}

/// Gets a palette value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _palette($keys...) {
@return val($palette, $keys...);
}

/// Gets a size value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _size($keys...) {
@return val($size, $keys...);
}

/* MIXINS */
/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {

text-decoration: none;

&:#{$where} {

    @if $content {
        content: $content;
    }

    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-family: FontAwesome;
    font-style: normal;
    font-weight: normal;
    text-transform: none !important;

}

}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

@if $important {
    $important: '!important';
}

padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max(0.1em, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {

$svg: str-replace($svg, '"', '\'');
$svg: str-replace($svg, '<', '%3C');
$svg: str-replace($svg, '>', '%3E');
$svg: str-replace($svg, '&', '%26');
$svg: str-replace($svg, '#', '%23');
$svg: str-replace($svg, '{', '%7B');
$svg: str-replace($svg, '}', '%7D');
$svg: str-replace($svg, ';', '%3B');

@return url("data:image/svg+xml;charset=utf8,#{$svg}");

}

/* SKEL */
// skel.scss v3.0.1 | (c) skel.io | MIT licensed */

// Vars.

/// Breakpoints.
/// @var {list}
$breakpoints: () !global;

/// Vendor prefixes.
/// @var {list}
$vendor-prefixes: (
    '-moz-',
    '-webkit-',
    '-ms-',
    ''
);

/// Properties that should be vendorized.
/// @var {list}
$vendor-properties: (
    'align-content',
    'align-items',
    'align-self',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'appearance',
    'backface-visibility',
    'box-sizing',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'justify-content',
    'order',
    'perspective',
    'pointer-events',
    'transform',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'user-select'
);

/// Values that should be vendorized.
/// @var {list}
$vendor-values: (
    'filter',
    'flex',
    'linear-gradient',
    'radial-gradient',
    'transform'
);

// Functions.

/// Removes a specific item from a list.
/// @author Hugo Giraudel
/// @param {list} $list List.
/// @param {integer} $index Index.
/// @return {list} Updated list.
@function remove-nth($list, $index) {

    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    }
    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    }
    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    }
    @else {

        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {

            @if $i != $index {
                $result: append($result, nth($list, $i));
            }

        }

    }

    @return $result;

}

/// Replaces a substring within another string.
/// @author Hugo Giraudel
/// @param {string} $string String.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {string} Updated string.
@function str-replace($string, $search, $replace: '') {

    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;

}

/// Replaces a substring within each string in a list.
/// @param {list} $strings List of strings.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {list} Updated list of strings.
@function str-replace-all($strings, $search, $replace: '') {

    @each $string in $strings {
        $strings: set-nth($strings, index($strings, $string), str-replace($string, $search, $replace));
    }

    @return $strings;

}

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {

    @if nth($keys, 1) == null {
        $keys: remove-nth($keys, 1);
    }

    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;

}

// Mixins.

/// Sets the global box model.
/// @param {string} $model Model (default is content).
@mixin boxModel($model: 'content') {

    $x: $model + '-box';

    *, *:before, *:after {
        -moz-box-sizing: #{$x};
        -webkit-box-sizing: #{$x};
        box-sizing: #{$x};
    }

}

/// Wraps @content in a @media block using a given breakpoint.
/// @param {string} $breakpoint Breakpoint.
/// @param {map} $queries Additional queries.
@mixin breakpoint($breakpoint: null, $queries: null) {

    $query: 'screen';

    // Breakpoint.
        @if $breakpoint and map-has-key($breakpoints, $breakpoint) {
            $query: $query + ' and ' + map-get($breakpoints, $breakpoint);
        }

    // Queries.
        @if $queries {
            @each $k, $v in $queries {
                $query: $query + ' and (' + $k + ':' + $v + ')';
            }
        }

    @media #{$query} {
        @content;
    }

}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
    @media screen and (orientation: #{$orientation}) {
        @content;
    }
}

/// Utility mixin for containers.
/// @param {mixed} $width Width.
@mixin containers($width) {

    // Locked?
        $lock: false;

        @if length($width) == 2 {
            $width: nth($width, 1);
            $lock: true;
        }

    // Modifiers.
        .container.\31 25\25		{ width: 100%; max-width: $width * 1.25; min-width: $width; }
        .container.\37 5\25			{ width: $width * 0.75; }
        .container.\35 0\25			{ width: $width * 0.5; }
        .container.\32 5\25			{ width: $width * 0.25; }

    // Main class.
        .container {
            @if $lock {
                width: $width !important;
            }
            @else {
                width: $width;
            }
        }

}

/// Utility mixin for grid.
/// @param {list} $gutters Column and row gutters (default is 40px).
/// @param {string} $breakpointName Optional breakpoint name.
@mixin grid($gutters: 40px, $breakpointName: null) {

    // Gutters.
        @include grid-gutters($gutters);
        @include grid-gutters($gutters, \32 00\25, 2);
        @include grid-gutters($gutters, \31 50\25, 1.5);
        @include grid-gutters($gutters, \35 0\25, 0.5);
        @include grid-gutters($gutters, \32 5\25, 0.25);

    // Cells
        $x: '';

        @if $breakpointName {
            $x: '\\28' + $breakpointName + '\\29';
        }

        .\31 2u#{$x}, .\31 2u\24#{$x} { width: 100%; clear: none; margin-left: 0; }
        .\31 1u#{$x}, .\31 1u\24#{$x} { width: 91.6666666667%; clear: none; margin-left: 0; }
        .\31 0u#{$x}, .\31 0u\24#{$x} { width: 83.3333333333%; clear: none; margin-left: 0; }
        .\39 u#{$x}, .\39 u\24#{$x} { width: 75%; clear: none; margin-left: 0; }
        .\38 u#{$x}, .\38 u\24#{$x} { width: 66.6666666667%; clear: none; margin-left: 0; }
        .\37 u#{$x}, .\37 u\24#{$x} { width: 58.3333333333%; clear: none; margin-left: 0; }
        .\36 u#{$x}, .\36 u\24#{$x} { width: 50%; clear: none; margin-left: 0; }
        .\35 u#{$x}, .\35 u\24#{$x} { width: 41.6666666667%; clear: none; margin-left: 0; }
        .\34 u#{$x}, .\34 u\24#{$x} { width: 33.3333333333%; clear: none; margin-left: 0; }
        .\33 u#{$x}, .\33 u\24#{$x} { width: 25%; clear: none; margin-left: 0; }
        .\32 u#{$x}, .\32 u\24#{$x} { width: 16.6666666667%; clear: none; margin-left: 0; }
        .\31 u#{$x}, .\31 u\24#{$x} { width: 8.3333333333%; clear: none; margin-left: 0; }

        .\31 2u\24#{$x} + *,
        .\31 1u\24#{$x} + *,
        .\31 0u\24#{$x} + *,
        .\39 u\24#{$x} + *,
        .\38 u\24#{$x} + *,
        .\37 u\24#{$x} + *,
        .\36 u\24#{$x} + *,
        .\35 u\24#{$x} + *,
        .\34 u\24#{$x} + *,
        .\33 u\24#{$x} + *,
        .\32 u\24#{$x} + *,
        .\31 u\24#{$x} + * {
            clear: left;
        }

        .\-11u#{$x} { margin-left: 91.6666666667% }
        .\-10u#{$x} { margin-left: 83.3333333333% }
        .\-9u#{$x} { margin-left: 75% }
        .\-8u#{$x} { margin-left: 66.6666666667% }
        .\-7u#{$x} { margin-left: 58.3333333333% }
        .\-6u#{$x} { margin-left: 50% }
        .\-5u#{$x} { margin-left: 41.6666666667% }
        .\-4u#{$x} { margin-left: 33.3333333333% }
        .\-3u#{$x} { margin-left: 25% }
        .\-2u#{$x} { margin-left: 16.6666666667% }
        .\-1u#{$x} { margin-left: 8.3333333333% }

}

/// Utility mixin for grid.
/// @param {list} $gutters Gutters.
/// @param {string} $class Optional class name.
/// @param {integer} $multiplier Multiplier (default is 1).
@mixin grid-gutters($gutters, $class: null, $multiplier: 1) {

    // Expand gutters if it's not a list.
        @if length($gutters) == 1 {
            $gutters: ($gutters, 0);
        }

    // Get column and row gutter values.
        $c: nth($gutters, 1);
        $r: nth($gutters, 2);

    // Get class (if provided).
        $x: '';

        @if $class {
            $x: '.' + $class;
        }

    // Default.
        .row#{$x} > * { padding: ($r * $multiplier) 0 0 ($c * $multiplier); }
        .row#{$x} { margin: ($r * $multiplier * -1) 0 -1px ($c * $multiplier * -1); }

    // Uniform.
        .row.uniform#{$x} > * { padding: ($c * $multiplier) 0 0 ($c * $multiplier); }
        .row.uniform#{$x} { margin: ($c * $multiplier * -1) 0 -1px ($c * $multiplier * -1); }

}

/// Wraps @content in vendorized keyframe blocks.
/// @param {string} $name Name.
@mixin keyframes($name) {

    @-moz-keyframes #{$name} { @content; }
    @-webkit-keyframes #{$name} { @content; }
    @-ms-keyframes #{$name} { @content; }
    @keyframes #{$name} { @content; }

}

///
/// Sets breakpoints.
/// @param {map} $x Breakpoints.
///
@mixin skel-breakpoints($x: ()) {
    $breakpoints: $x !global;
}

///
/// Initializes layout module.
/// @param {map} config Config.
///
@mixin skel-layout($config: ()) {

    // Config.
        $configPerBreakpoint: ();

        $z: map-get($config, 'breakpoints');

        @if $z {
            $configPerBreakpoint: $z;
        }

    // Reset.
        $x: map-get($config, 'reset');

        @if $x {

            /* Reset */

            @include reset($x);

        }

    // Box model.
        $x: map-get($config, 'boxModel');

        @if $x {

            /* Box Model */

            @include boxModel($x);

        }

    // Containers.
        $containers: map-get($config, 'containers');

        @if $containers {

            /* Containers */

            .container {
                margin-left: auto;
                margin-right: auto;
            }

            // Use default is $containers is just "true".
                @if $containers == true {
                    $containers: 960px;
                }

            // Apply base.
                @include containers($containers);

            // Apply per-breakpoint.
                @each $name in map-keys($breakpoints) {

                    // Get/use breakpoint setting if it exists.
                        $x: map-get($configPerBreakpoint, $name);

                        // Per-breakpoint config exists?
                            @if $x {
                                $y: map-get($x, 'containers');

                                // Setting exists? Use it.
                                    @if $y {
                                        $containers: $y;
                                    }

                            }

                    // Create @media block.
                        @media screen and #{map-get($breakpoints, $name)} {
                            @include containers($containers);
                        }

                }

        }

    // Grid.
        $grid: map-get($config, 'grid');

        @if $grid {

            /* Grid */

            // Use defaults if $grid is just "true".
                @if $grid == true {
                    $grid: ();
                }

            // Sub-setting: Gutters.
                $grid-gutters: 40px;
                $x: map-get($grid, 'gutters');

                @if $x {
                    $grid-gutters: $x;
                }

            // Rows.
                .row {
                    border-bottom: solid 1px transparent;
                    -moz-box-sizing: border-box;
                    -webkit-box-sizing: border-box;
                    box-sizing: border-box;
                }

                .row > * {
                    float: left;
                    -moz-box-sizing: border-box;
                    -webkit-box-sizing: border-box;
                    box-sizing: border-box;
                }

                .row:after, .row:before {
                    content: '';
                    display: block;
                    clear: both;
                    height: 0;
                }

                .row.uniform > * > :first-child {
                    margin-top: 0;
                }

                .row.uniform > * > :last-child {
                    margin-bottom: 0;
                }

            // Gutters (0%).
                @include grid-gutters($grid-gutters, \30 \25, 0);

            // Apply base.
                @include grid($grid-gutters);

            // Apply per-breakpoint.
                @each $name in map-keys($breakpoints) {

                    // Get/use breakpoint setting if it exists.
                        $x: map-get($configPerBreakpoint, $name);

                        // Per-breakpoint config exists?
                            @if $x {
                                $y: map-get($x, 'grid');

                                // Setting exists?
                                    @if $y {

                                        // Sub-setting: Gutters.
                                            $x: map-get($y, 'gutters');

                                            @if $x {
                                                $grid-gutters: $x;
                                            }

                                    }

                            }

                    // Create @media block.
                        @media screen and #{map-get($breakpoints, $name)} {
                            @include grid($grid-gutters, $name);
                        }

                }

        }

}

/// Resets browser styles.
/// @param {string} $mode Mode (default is 'normalize').
@mixin reset($mode: 'normalize') {

    @if $mode == 'normalize' {

        // normalize.css v3.0.2 | MIT License | git.io/normalize
            html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}

    }
    @else if $mode == 'full' {

        // meyerweb.com/eric/tools/css/reset v2.0 | 20110126 | License: none (public domain)
            html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block;}body{line-height:1;}ol,ul{list-style:none;}blockquote,q{quotes:none;}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none;}table{border-collapse:collapse;border-spacing:0;}body{-webkit-text-size-adjust:none}

    }

}

/// Vendorizes a declaration's property and/or value(s).
/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin vendor($property, $value) {

    // Determine if property should expand.
        $expandProperty: index($vendor-properties, $property);

    // Determine if value should expand (and if so, add '-prefix-' placeholder).
        $expandValue: false;

        @each $x in $value {
            @each $y in $vendor-values {
                @if $y == str-slice($x, 1, str-length($y)) {

                    $value: set-nth($value, index($value, $x), '-prefix-' + $x);
                    $expandValue: true;

                }
            }
        }

    // Expand property?
        @if $expandProperty {
            @each $vendor in $vendor-prefixes {
                #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
            }
        }

    // Expand just the value?
        @elseif $expandValue {
            @each $vendor in $vendor-prefixes {
                #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
            }
        }

    // Neither? Treat them as a normal declaration.
        @else {
            #{$property}: #{$value};
        }

}

/*
Split Screen by HTML5 UP
html5up.net | @n33co
Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
*/

@include skel-breakpoints((
    xlarge: '(max-width: 1680px)',
    large: '(max-width: 1280px)',
    medium: '(max-width: 980px)',
    small: '(max-width: 736px)',
    xsmall: '(max-width: 480px)',
    xxsmall: '(max-width: 360px)'
));

@include skel-layout((
    reset: 'full',
    boxModel: 'border'
));

// Base.
/* Basic */

// MSIE: Required for IEMobile.
    @-ms-viewport {
        width: device-width;
    }

// Ensures page width is always >=320px.
    @include breakpoint(xsmall) {
        html, body {
            min-width: 320px;
        }
    }

body {
    background: _palette(bg);

    // Prevents animation/transition "flicker" on page load.
    // Automatically added/removed by js/main.js.
        &.is-loading {
            *, *:before, *:after {
                @include vendor('animation', 'none !important');
                @include vendor('transition', 'none !important');
            }
        }

}

/* Type */

body, input, select, textarea {
    color: _palette(fg);
    font-family: _font(family);
    font-size: 22pt;
    font-weight: _font(weight);
    letter-spacing: -0.01em;
    line-height: 1.65;

    @include breakpoint(xlarge) {
        font-size: 15pt;
    }

    @include breakpoint(large) {
        font-size: 14pt;
    }

    @include breakpoint(small) {
        font-size: 12pt;
    }
}

a {
    @include vendor('transition', (
        'color #{_duration(transition)} ease-in-out',
        'border-bottom-color #{_duration(transition)} ease-in-out'
    ));
    color: _palette(accent, bg);
    border-bottom: dotted 1px;
    text-decoration: none;

    &:hover {
        border-bottom-color: _palette(accent, bg);
        color: _palette(accent, bg) !important;
    }
}

strong, b {
    color: _palette(fg-bold);
    font-weight: _font(weight-bold);
}

em, i {
    font-style: italic;
}

p {
    margin: 0 0 _size(element-margin) 0;
}

h1, h2, h3, h4, h5, h6 {
    color: _palette(fg-bold);
    font-weight: _font(weight);
    letter-spacing: -0.025em;
    line-height: 1.4;
    margin: 0 0 (_size(element-margin) * 0.4) 0;

    b {
        color: _palette(accent, bg);
        font-weight: _font(weight);
    }

    a {
        color: inherit;
        text-decoration: none;
    }
}

h1 {
    font-weight: _font(weight-extrabold);
    margin: 0 0 (_size(element-margin) * 0.85) 0;
    text-transform: uppercase;
    font-size: 1em;

    b {
        font-weight: _font(weight-extrabold);
    }
}

h2 {
    font-size: 2em;
}

h3 {
    font-size: 1.35em;
}

h4 {
    font-size: 1.1em;
}

h5 {
    font-size: 0.9em;
}

h6 {
    font-size: 0.7em;
}

@include breakpoint(medium) {
    h1, h2, h3, h4, h5, h6 {
        br {
            display: none;
        }
    }
}

@include breakpoint(small) {
    h1, h2, h3, h4, h5, h6 {
        margin: 0 0 (_size(element-margin) * 0.5) 0;
    }

    h2 {
        font-size: 1.5em;
    }
}

sub {
    font-size: 0.8em;
    position: relative;
    top: 0.5em;
}

sup {
    font-size: 0.8em;
    position: relative;
    top: -0.5em;
}

blockquote {
    border-left: solid 4px _palette(border);
    font-style: italic;
    margin: 0 0 _size(element-margin) 0;
    padding: (_size(element-margin) / 4) 0 (_size(element-margin) / 4) _size(element-margin);
}

code {
    border-radius: _size(border-radius);
    border: solid 2px _palette(border);
    font-family: _font(family-fixed);
    font-size: 0.9em;
    margin: 0 0.25em;
    padding: 0.25em 0.65em;
}

pre {
    -webkit-overflow-scrolling: touch;
    font-family: _font(family-fixed);
    font-size: 0.9em;
    margin: 0 0 _size(element-margin) 0;

    code {
        display: block;
        line-height: 1.75em;
        padding: 1em 1.5em;
        overflow-x: auto;
    }
}

hr {
    border: 0;
    border-bottom: solid 2px _palette(border);
    margin: (_size(element-margin) * 1.25) 0;

    &.major {
        margin: (_size(element-margin) * 1.75) 0;
    }
}

.align-left {
    text-align: left;
}

.align-center {
    text-align: center;
}

.align-right {
    text-align: right;
}


/* Form */

form {
    margin: 0 0 _size(element-margin) 0;

    > .field {
        margin: 0 0 (_size(element-margin) * 0.5) 0;

        > :last-child {
            margin-bottom: 0;
        }
    }
}

label {
    color: _palette(fg-bold);
    display: block;
    font-size: 0.9em;
    font-weight: _font(weight-bold);
    margin: 0 0 (_size(element-margin) * 0.35) 0;
}

input[type="text"],
input[type="password"],
input[type="email"],
input[type="tel"],
select,
textarea {
    @include vendor('appearance', 'none');
    border-radius: _size(border-radius);
    border: none;
    border: solid 2px _palette(border);
    color: inherit;
    display: block;
    outline: 0;
    padding: 0 0.75em;
    text-decoration: none;
    width: 100%;

    &:invalid {
        box-shadow: none;
    }

    &:focus {
        border-color: _palette(accent, bg);
    }
}

.select-wrapper {
    @include icon;
    display: block;
    position: relative;

    &:before {
        color: _palette(border);
        content: '\f078';
        display: block;
        height: _size(element-height);
        line-height: _size(element-height);
        pointer-events: none;
        position: absolute;
        right: 0;
        text-align: center;
        top: 0;
        width: _size(element-height);
    }

    select::-ms-expand {
        display: none;
    }
}

input[type="text"],
input[type="password"],
input[type="email"],
select {
    height: _size(element-height);
}

textarea {
    padding: 0.75em 1em;
}

input[type="checkbox"],
input[type="radio"], {
    @include vendor('appearance', 'none');
    display: block;
    float: left;
    margin-right: -2em;
    opacity: 0;
    width: 1em;
    z-index: -1;

    & + label {
        @include icon;
        color: _palette(fg);
        cursor: pointer;
        display: inline-block;
        font-size: 1em;
        font-weight: _font(weight);
        padding-left: (_size(element-height) * 0.6) + 0.75em;
        padding-right: 0.75em;
        position: relative;

        &:before {
            border-radius: _size(border-radius);
            border: solid 2px _palette(border);
            content: '';
            display: inline-block;
            height: (_size(element-height) * 0.6);
            left: 0;
            line-height: (_size(element-height) * 0.575);
            position: absolute;
            text-align: center;
            top: 0;
            width: (_size(element-height) * 0.6);
        }
    }

    &:checked + label {
        &:before {
            background: _palette(fg-bold);
            border-color: _palette(fg-bold);
            color: _palette(bg);
            content: '\f00c';
        }
    }

    &:focus + label {
        &:before {
            border-color: _palette(accent, bg);
        }
    }
}

input[type="checkbox"] {
    & + label {
        &:before {
            border-radius: _size(border-radius);
        }
    }
}

input[type="radio"] {
    & + label {
        &:before {
            border-radius: 100%;
        }
    }
}

::-webkit-input-placeholder {
    color: _palette(fg-light) !important;
    opacity: 1.0;
}

:-moz-placeholder {
    color: _palette(fg-light) !important;
    opacity: 1.0;
}

::-moz-placeholder {
    color: _palette(fg-light) !important;
    opacity: 1.0;
}

:-ms-input-placeholder {
    color: _palette(fg-light) !important;
    opacity: 1.0;
}

.polyfill-placeholder {
    color: _palette(fg-light) !important;
    opacity: 1.0;
}

/* Icon */

.icon {
    @include icon;
    border-bottom: none;
    color: inherit;
    position: relative;

    > .label {
        display: none;
    }
}


/* List */

ol {
    list-style: decimal;
    margin: 0 0 _size(element-margin) 0;
    padding-left: 1.25em;

    li {
        padding-left: 0.25em;
    }
}

ul {
    list-style: disc;
    margin: 0 0 _size(element-margin) 0;
    padding-left: 1em;

    li {
        padding-left: 0.5em;
    }

    &.alt {
        list-style: none;
        padding-left: 0;

        li {
            border-top: solid 1px _palette(border);
            padding: 0.5em 0;

            &:first-child {
                border-top: 0;
                padding-top: 0;
            }
        }
    }

    &.icons {
        cursor: default;
        list-style: none;
        padding-left: 0;

        li {
            display: inline-block;
            padding: 0 1em 0 0;

            &:last-child {
                padding-right: 0;
            }

            .icon {
                &:before {
                    font-size: 1em;

                    @include breakpoint(small) {
                        font-size: 1.25em;
                    }
                }
            }
        }
    }

    &.actions {
        cursor: default;
        list-style: none;
        padding-left: 0;

        li {
            display: inline-block;
            padding: 0 (_size(element-margin) * 0.5) 0 0;
            vertical-align: middle;

            &:last-child {
                padding-right: 0;
            }
        }

        &.small {
            li {
                padding: 0 (_size(element-margin) * 0.25) 0 0;
            }
        }

        &.vertical {
            li {
                display: block;
                padding: (_size(element-margin) * 0.5) 0 0 0;

                &:first-child {
                    padding-top: 0;
                }

                > * {
                    margin-bottom: 0;
                }
            }

            &.small {
                li {
                    padding: (_size(element-margin) * 0.25) 0 0 0;

                    &:first-child {
                        padding-top: 0;
                    }
                }
            }
        }

        &.fit {
            display: table;
            margin-left: (_size(element-margin) * -0.5);
            padding: 0;
            table-layout: fixed;
            width: calc(100% + #{(_size(element-margin) * 0.5)});

            li {
                display: table-cell;
                padding: 0 0 0 (_size(element-margin) * 0.5);

                > * {
                    margin-bottom: 0;
                }
            }

            &.small {
                margin-left: (_size(element-margin) * -0.25);
                width: calc(100% + #{(_size(element-margin) * 0.25)});

                li {
                    padding: 0 0 0 (_size(element-margin) * 0.25);
                }
            }
        }

        @include breakpoint(xsmall) {
            margin: 0 0 _size(element-margin) 0;

            li {
                display: block;
                padding: (_size(element-margin) * 0.5) 0 0 0;
                text-align: center;
                width: 100%;

                &:first-child {
                    padding-top: 0;
                }

                > * {
                    margin: 0 !important;
                    width: 100%;

                    &.icon {
                        &:before {
                            margin-left: -1.75em;
                        }
                    }
                }
            }

            &.small {
                li {
                    padding: (_size(element-margin) * 0.25) 0 0 0;

                    &:first-child {
                        padding-top: 0;
                    }
                }
            }
        }
    }
}

dl {
    margin: 0 0 _size(element-margin) 0;

    dt {
        display: block;
        font-weight: _font(weight-bold);
        margin: 0 0 (_size(element-margin) * 0.5) 0;
    }

    dd {
        margin-left: _size(element-margin);
    }
}

/* Button */

input[type="submit"],
input[type="reset"],
input[type="button"],
button,
.button {
    @include vendor('appearance', 'none');
    @include vendor('transition', (
        'background-color #{_duration(transition)} ease-in-out',
        'box-shadow #{_duration(transition)} ease-in-out',
        'color #{_duration(transition)} ease-in-out'
    ));
    background-color: transparent;
    border-radius: _size(border-radius);
    border: 0;
    box-shadow: inset 0 0 0 2px _palette(border);
    color: _palette(fg-bold) !important;
    cursor: pointer;
    display: inline-block;
    font-weight: _font(weight-bold);
    height: 2.75em;
    line-height: 2.75em;
    padding: 0 2em;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;

    &.icon {
        padding-left: 1.35em;

        &:before {
            margin-right: 0.5em;
        }
    }

    &.fit {
        display: block;
        margin: 0 0 (_size(element-margin) * 0.5) 0;
        width: 100%;
    }

    &.small {
        font-size: 0.8em;
    }

    &:hover {
        box-shadow: inset 0 0 0 2px _palette(accent, bg);

        &:active {
            background-color: transparentize(_palette(accent, bg), 0.9);
        }
    }

    &.special {
        background-color: _palette(accent, bg);
        box-shadow: none;
        color: _palette(accent, fg-bold) !important;

        &:hover {
            background-color: lighten(_palette(accent, bg), 5);
        }

        &:active {
            background-color: darken(_palette(accent, bg), 5);
        }
    }

    &.disabled,
    &:disabled {
        opacity: 0.25;
    }

    @include breakpoint(xsmall) {
        padding: 0;
    }
}
/* Page Wrapper */

#page-wrapper {
    @include vendor('display', 'flex');
    @include vendor('flex-direction', 'row-reverse');
    @include vendor('align-items', 'stretch');
    min-height: 100vh;

    body.is-ie & {
        height: 100vh;
    }

    @include breakpoint(medium) {
        body.is-ie & {
            height: auto;
        }
    }

    @include orientation(portrait) {
        @include vendor('flex-direction', 'column-reverse');
        height: auto !important;
        min-height: 0 !important;
    }
}

/* Wrapper */

#wrapper {
    @include padding(4.5em, 4.5em);
    @include vendor('display', 'flex');
    @include vendor('flex-direction', 'column');
    @include vendor('justify-content', 'space-between');
    width: 55vw;
    max-height: 100vh;
    overflow-y: scroll;
    &:before {
        content: '';
    }

    .inner {
       // max-width: 30em;
    }

    footer {
        color: _palette(fg-light);

        ul {
            margin: 0;
        }
    }

    > * {
        @include vendor('transition', (
            'opacity #{_duration(load)} ease',
            'transform #{_duration(load)} ease'
        ));
        @include vendor('transform', 'translateX(0) translateY(0)');
        opacity: 1;
    }

    @include breakpoint(large) {
        @include padding(4.5em, 4em);
    }

    @include breakpoint(medium) {
        @include padding(4em, 4em);

        @include orientation(portrait) {
            .inner {
                max-width: 28em;
            }
        }
    }

    @include breakpoint(small) {
        @include padding(3em, 3em);
        @include vendor('justify-content', 'flex-start');

        footer {
            ul {
                margin: 0 0 _size(element-margin) 0;
            }
        }
    }

    @include breakpoint(xsmall) {
        @include padding(3em, 2em);
    }

    @include breakpoint(xxsmall) {
        @include padding(2em, 1.5em);
    }

    @include orientation(portrait) {
        @include vendor('align-items', 'center');
        text-align: center;
        width: 100%;

        .inner {
            width: 100%;
        }

        footer {
            margin: (_size(element-margin) * 0.25) 0 0 0;

            ul {
                margin: 0 0 _size(element-margin) 0;
            }
        }
    }

    body.is-loading & {
        > * {
            @include vendor('transform', 'translateX(0.5em)');
            opacity: 0;
        }

        @include orientation(portrait) {
            > * {
                @include vendor('transform', 'translateY(0.5em)');
            }
        }
    }
}
/* Banner */

#banner {
    display: -moz-flex;
		display: -webkit-flex;
		display: -ms-flex;
		display: flex;
		-moz-align-items: center;
		-webkit-align-items: center;
		-ms-align-items: center;
		align-items: center;
		-moz-justify-content: center;
		-webkit-justify-content: center;
		-ms-justify-content: center;
		justify-content: center;
		background: #e6e8eb;
		overflow: hidden;
		width: 45vw;
    .inner {
        $color: _palette(bg-alt);
        $color-shadow: darken(_palette(bg-alt), 3);
        position: relative;
        &:before, &:after {
            content: '';
            width: 100vh;
            height: 100vh;
            width: 100vmax;
            height: 100vmax;
            background-size: 100% 100%;
            position: absolute;
        }

        &:before {
            background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100" preserveAspectRatio="none"><polygon points="0,100 100,0 100,100" style="fill:#{$color-shadow};" /></svg>');
            top: 0em;
            right: calc(100% - 0.45em);
        }

        &:after {
            background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100" preserveAspectRatio="none"><polygon points="0,0 100,0 0,100" style="fill:#{$color-shadow};" /><polygon points="0,100 100,0 100,100" style="fill:#{$color};" /></svg>');
            top: calc(100% - 0.9em);
            right: 0em;
        }
    }

    .banner-content {
        position: relative;
        display: inline-block;
        padding: 1.85em 0.5em 3.25em 0.5em;
        background: black;
        border-radius: 0.75em;
        z-index: 1;

        &:before {
            content: '';
            display: block;
            position: absolute;
            top: 0.75em;
            left: 50%;
            width: 2.5em;
            height: 0.4em;
            margin-left: -1.25em;
            border-radius: 1em;
            background: transparent;
            box-shadow: inset 0 0 0 2px _palette(border);
        }

        &:after {
            content: '';
            display: block;
            position: absolute;
            bottom: 0.7em;
            left: 50%;
            width: 1.85em;
            height: 1.85em;
            margin-left: -1em;
            border-radius: 100%;
            background: transparent;
            box-shadow: inset 0 0 0 2px _palette(border);
        }
    }

    ul {
        margin: 0;
        padding: 0;
        position: relative;
        white-space: nowrap;
        width: 11.25em;
        height: 20em;

        &:after {
            @include vendor('transition', 'opacity #{_duration(load)} ease-in');
            content: '';
            display: block;
            background: _palette(fg-bold);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            z-index: 3;
        }

        li {
            @include vendor('transition', 'opacity #{_duration(banner)} ease-in-out');
            display: block;
            left: 0;
            list-style: none;
            padding: 0;
            position: absolute;
            top: 0;
            z-index: 1;
            opacity: 0;

            img {
                display: block;
                width: 11.25em;
                height: 20em;
            }

            &.visible {
                opacity: 1;
            }

            &.top {
                z-index: 2;
            }
        }
    }

    @include breakpoint(medium) {
        padding: 2.5em 0;

        .content {
            padding: 1.5em 0.35em 3em 0.35em;
        }

        ul {
            width: 10.125em;
            height: 18em;

            li {
                img {
                    width: 10.125em;
                    height: 18em;
                }
            }
        }
    }

    @include breakpoint(small) {
        @include vendor('align-items', 'flex-start');
        padding: 3em 0;

        .content {
            padding: 1em 0.3em 2em 0.3em;

            &:before {
                top: 0.385em;
                width: 2em;
                height: 0.35em;
                margin-left: -1em;
            }

            &:after {
                bottom: 0.375em;
                width: 1.25em;
                height: 1.25em;
                margin-left: -0.625em;
            }
        }

        ul {
            width: 8.4375em;
            height: 15em;

            li {
                img {
                    width: 8.4375em;
                    height: 15em;
                }
            }
        }

        @include orientation(portrait) {
            padding: 1.5em 0;
        }
    }

    @include orientation(portrait) {
        width: 100%;
    }

    body.is-loading & {
        .inner {
            ul {
                &:after {
                    opacity: 1;
                }
            }
        }
    }
}
/* Footer */

#footer {
    position: fixed;
    bottom: 0;
    right: 0;
}